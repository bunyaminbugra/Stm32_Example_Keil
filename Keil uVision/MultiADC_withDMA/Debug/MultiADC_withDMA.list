
MultiADC_withDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003378  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003540  08003540  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003548  08003548  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  0800355c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800355c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006866  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014e7  00000000  00000000  000268a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000610  00000000  00000000  00027d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000558  00000000  00000000  000283a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021fed  00000000  00000000  000288f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005d94  00000000  00000000  0004a8e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf780  00000000  00000000  00050679  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fdf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001810  00000000  00000000  0011fe74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003510 	.word	0x08003510

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08003510 	.word	0x08003510

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b972 	b.w	8000d28 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	4688      	mov	r8, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14b      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4615      	mov	r5, r2
 8000a6e:	d967      	bls.n	8000b40 <__udivmoddi4+0xe4>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0720 	rsb	r7, r2, #32
 8000a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a82:	4095      	lsls	r5, r2
 8000a84:	ea47 0803 	orr.w	r8, r7, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8e:	0c23      	lsrs	r3, r4, #16
 8000a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a94:	fa1f fc85 	uxth.w	ip, r5
 8000a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x60>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aae:	f080 811b 	bcs.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 8118 	bls.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab8:	3f02      	subs	r7, #2
 8000aba:	442b      	add	r3, r5
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	45a4      	cmp	ip, r4
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x8c>
 8000ad4:	192c      	adds	r4, r5, r4
 8000ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ada:	f080 8107 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	f240 8104 	bls.w	8000cec <__udivmoddi4+0x290>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	442c      	add	r4, r5
 8000ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aec:	eba4 040c 	sub.w	r4, r4, ip
 8000af0:	2700      	movs	r7, #0
 8000af2:	b11e      	cbz	r6, 8000afc <__udivmoddi4+0xa0>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c6 4300 	strd	r4, r3, [r6]
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xbe>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80eb 	beq.w	8000ce2 <__udivmoddi4+0x286>
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b12:	4638      	mov	r0, r7
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f783 	clz	r7, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d147      	bne.n	8000bb2 <__udivmoddi4+0x156>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd0>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80fa 	bhi.w	8000d20 <__udivmoddi4+0x2c4>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4698      	mov	r8, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa0>
 8000b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa0>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xe8>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 808f 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b54:	fa1f f885 	uxth.w	r8, r5
 8000b58:	2701      	movs	r7, #1
 8000b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb08 f10c 	mul.w	r1, r8, ip
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b70:	18eb      	adds	r3, r5, r3
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	f200 80cd 	bhi.w	8000d18 <__udivmoddi4+0x2bc>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x14c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x14a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80b6 	bhi.w	8000d12 <__udivmoddi4+0x2b6>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e79f      	b.n	8000af2 <__udivmoddi4+0x96>
 8000bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bb6:	40bb      	lsls	r3, r7
 8000bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bd0:	4325      	orrs	r5, r4
 8000bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bd6:	0c2c      	lsrs	r4, r5, #16
 8000bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bdc:	fa1f fa8e 	uxth.w	sl, lr
 8000be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000be4:	fb09 f40a 	mul.w	r4, r9, sl
 8000be8:	429c      	cmp	r4, r3
 8000bea:	fa02 f207 	lsl.w	r2, r2, r7
 8000bee:	fa00 f107 	lsl.w	r1, r0, r7
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bfc:	f080 8087 	bcs.w	8000d0e <__udivmoddi4+0x2b2>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f240 8084 	bls.w	8000d0e <__udivmoddi4+0x2b2>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4473      	add	r3, lr
 8000c0c:	1b1b      	subs	r3, r3, r4
 8000c0e:	b2ad      	uxth	r5, r5
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c20:	45a2      	cmp	sl, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1e 0404 	adds.w	r4, lr, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	d26b      	bcs.n	8000d06 <__udivmoddi4+0x2aa>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	d969      	bls.n	8000d06 <__udivmoddi4+0x2aa>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4474      	add	r4, lr
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3e:	eba4 040a 	sub.w	r4, r4, sl
 8000c42:	454c      	cmp	r4, r9
 8000c44:	46c2      	mov	sl, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	d354      	bcc.n	8000cf4 <__udivmoddi4+0x298>
 8000c4a:	d051      	beq.n	8000cf0 <__udivmoddi4+0x294>
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d069      	beq.n	8000d24 <__udivmoddi4+0x2c8>
 8000c50:	ebb1 050a 	subs.w	r5, r1, sl
 8000c54:	eb64 0403 	sbc.w	r4, r4, r3
 8000c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	40fc      	lsrs	r4, r7
 8000c60:	ea4c 0505 	orr.w	r5, ip, r5
 8000c64:	e9c6 5400 	strd	r5, r4, [r6]
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f703 	lsr.w	r7, r0, r3
 8000c74:	4095      	lsls	r5, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	4338      	orrs	r0, r7
 8000c84:	0c01      	lsrs	r1, r0, #16
 8000c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c8a:	fa1f f885 	uxth.w	r8, r5
 8000c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb07 f308 	mul.w	r3, r7, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x256>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ca8:	d22f      	bcs.n	8000d0a <__udivmoddi4+0x2ae>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d92d      	bls.n	8000d0a <__udivmoddi4+0x2ae>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	b281      	uxth	r1, r0
 8000cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc2:	fb00 f308 	mul.w	r3, r0, r8
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x27e>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd0:	d217      	bcs.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d915      	bls.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1ac9      	subs	r1, r1, r3
 8000cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ce0:	e73b      	b.n	8000b5a <__udivmoddi4+0xfe>
 8000ce2:	4637      	mov	r7, r6
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e709      	b.n	8000afc <__udivmoddi4+0xa0>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	e6e7      	b.n	8000abc <__udivmoddi4+0x60>
 8000cec:	4618      	mov	r0, r3
 8000cee:	e6fb      	b.n	8000ae8 <__udivmoddi4+0x8c>
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	d2ab      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	e7a4      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7e9      	b.n	8000cda <__udivmoddi4+0x27e>
 8000d06:	4618      	mov	r0, r3
 8000d08:	e795      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0a:	4667      	mov	r7, ip
 8000d0c:	e7d1      	b.n	8000cb2 <__udivmoddi4+0x256>
 8000d0e:	4681      	mov	r9, r0
 8000d10:	e77c      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0x14c>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	442b      	add	r3, r5
 8000d1e:	e72f      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d20:	4638      	mov	r0, r7
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xda>
 8000d24:	4637      	mov	r7, r6
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0xa0>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	0000      	movs	r0, r0
	...

08000d30 <ReadAdc>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t ReadAdc(){
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	af00      	add	r7, sp, #0

	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000d34:	2164      	movs	r1, #100	; 0x64
 8000d36:	4826      	ldr	r0, [pc, #152]	; (8000dd0 <ReadAdc+0xa0>)
 8000d38:	f000 fcc3 	bl	80016c2 <HAL_ADC_PollForConversion>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d128      	bne.n	8000d94 <ReadAdc+0x64>

		adc1Val[0] = HAL_ADC_GetValue(&hadc1);
 8000d42:	4823      	ldr	r0, [pc, #140]	; (8000dd0 <ReadAdc+0xa0>)
 8000d44:	f000 fe34 	bl	80019b0 <HAL_ADC_GetValue>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <ReadAdc+0xa4>)
 8000d4e:	801a      	strh	r2, [r3, #0]

		Vrefin = 3.3 * (*VREFIN_CAL) / adc1Val[0];
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <ReadAdc+0xa8>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fb9d 	bl	8000494 <__aeabi_i2d>
 8000d5a:	a31b      	add	r3, pc, #108	; (adr r3, 8000dc8 <ReadAdc+0x98>)
 8000d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d60:	f7ff fc02 	bl	8000568 <__aeabi_dmul>
 8000d64:	4603      	mov	r3, r0
 8000d66:	460c      	mov	r4, r1
 8000d68:	4625      	mov	r5, r4
 8000d6a:	461c      	mov	r4, r3
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <ReadAdc+0xa4>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fb8f 	bl	8000494 <__aeabi_i2d>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	f7ff fd1d 	bl	80007bc <__aeabi_ddiv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	460c      	mov	r4, r1
 8000d86:	4618      	mov	r0, r3
 8000d88:	4621      	mov	r1, r4
 8000d8a:	f7ff fdff 	bl	800098c <__aeabi_d2f>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <ReadAdc+0xac>)
 8000d92:	601a      	str	r2, [r3, #0]
	}


	HAL_ADC_Stop(&hadc1);
 8000d94:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <ReadAdc+0xa0>)
 8000d96:	f000 fc61 	bl	800165c <HAL_ADC_Stop>

	return (Vrefin * adc2Val[0] / 4095);
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <ReadAdc+0xb0>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	ee07 3a90 	vmov	s15, r3
 8000da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <ReadAdc+0xac>)
 8000da8:	edd3 7a00 	vldr	s15, [r3]
 8000dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000db0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000de4 <ReadAdc+0xb4>
 8000db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dbc:	ee17 3a90 	vmov	r3, s15
 8000dc0:	b29b      	uxth	r3, r3

}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	66666666 	.word	0x66666666
 8000dcc:	400a6666 	.word	0x400a6666
 8000dd0:	20000070 	.word	0x20000070
 8000dd4:	20000124 	.word	0x20000124
 8000dd8:	1fff7a2a 	.word	0x1fff7a2a
 8000ddc:	200000bc 	.word	0x200000bc
 8000de0:	200000c0 	.word	0x200000c0
 8000de4:	457ff000 	.word	0x457ff000

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dec:	f000 faba 	bl	8001364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df0:	f000 f824 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f000 f956 	bl	80010a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df8:	f000 f934 	bl	8001064 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dfc:	f000 f88e 	bl	8000f1c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e00:	f000 f8de 	bl	8000fc0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADC_Start(&hadc1);
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <main+0x44>)
 8000e06:	f000 fb63 	bl	80014d0 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc2, adc2Val, 1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4908      	ldr	r1, [pc, #32]	; (8000e30 <main+0x48>)
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <main+0x4c>)
 8000e10:	f000 fcdc 	bl	80017cc <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Vadc = ReadAdc();
 8000e14:	f7ff ff8c 	bl	8000d30 <ReadAdc>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <main+0x50>)
 8000e24:	edc3 7a00 	vstr	s15, [r3]
 8000e28:	e7f4      	b.n	8000e14 <main+0x2c>
 8000e2a:	bf00      	nop
 8000e2c:	20000070 	.word	0x20000070
 8000e30:	200000c0 	.word	0x200000c0
 8000e34:	20000028 	.word	0x20000028
 8000e38:	200000b8 	.word	0x200000b8

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	; 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	2230      	movs	r2, #48	; 0x30
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 fb58 	bl	8003500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <SystemClock_Config+0xd8>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a2a      	ldr	r2, [pc, #168]	; (8000f14 <SystemClock_Config+0xd8>)
 8000e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <SystemClock_Config+0xd8>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <SystemClock_Config+0xdc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <SystemClock_Config+0xdc>)
 8000e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <SystemClock_Config+0xdc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eac:	2304      	movs	r3, #4
 8000eae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000eb0:	23b4      	movs	r3, #180	; 0xb4
 8000eb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fecb 	bl	8002c5c <HAL_RCC_OscConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ecc:	f000 f912 	bl	80010f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ed0:	f001 fe74 	bl	8002bbc <HAL_PWREx_EnableOverDrive>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000eda:	f000 f90b 	bl	80010f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ede:	230f      	movs	r3, #15
 8000ee0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2105      	movs	r1, #5
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 f91d 	bl	800313c <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000f08:	f000 f8f4 	bl	80010f4 <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3750      	adds	r7, #80	; 0x50
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000

08000f1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <MX_ADC1_Init+0x9c>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <MX_ADC1_Init+0xa0>)
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f7e:	f000 fa63 	bl	8001448 <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f88:	f000 f8b4 	bl	80010f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f8c:	2311      	movs	r3, #17
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f94:	2302      	movs	r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_ADC1_Init+0x98>)
 8000f9e:	f000 fd33 	bl	8001a08 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fa8:	f000 f8a4 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000070 	.word	0x20000070
 8000fb8:	40012000 	.word	0x40012000
 8000fbc:	0f000001 	.word	0x0f000001

08000fc0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_ADC2_Init+0x98>)
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <MX_ADC2_Init+0x9c>)
 8000fd6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_ADC2_Init+0x98>)
 8000fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fde:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_ADC2_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_ADC2_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_ADC2_Init+0x98>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_ADC2_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_ADC2_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_ADC2_Init+0x98>)
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <MX_ADC2_Init+0xa0>)
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_ADC2_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_ADC2_Init+0x98>)
 800100e:	2201      	movs	r2, #1
 8001010:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_ADC2_Init+0x98>)
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_ADC2_Init+0x98>)
 800101c:	2201      	movs	r2, #1
 800101e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_ADC2_Init+0x98>)
 8001022:	f000 fa11 	bl	8001448 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800102c:	f000 f862 	bl	80010f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_ADC2_Init+0x98>)
 8001042:	f000 fce1 	bl	8001a08 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800104c:	f000 f852 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000028 	.word	0x20000028
 800105c:	40012100 	.word	0x40012100
 8001060:	0f000001 	.word	0x0f000001

08001064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_DMA_Init+0x3c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <MX_DMA_Init+0x3c>)
 8001074:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_DMA_Init+0x3c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	203a      	movs	r0, #58	; 0x3a
 800108c:	f001 f847 	bl	800211e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001090:	203a      	movs	r0, #58	; 0x3a
 8001092:	f001 f860 	bl	8002156 <HAL_NVIC_EnableIRQ>

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_GPIO_Init+0x4c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <MX_GPIO_Init+0x4c>)
 80010b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MX_GPIO_Init+0x4c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_GPIO_Init+0x4c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <MX_GPIO_Init+0x4c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_GPIO_Init+0x4c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]

}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <HAL_MspInit+0x4c>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_MspInit+0x4c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a08      	ldr	r2, [pc, #32]	; (8001150 <HAL_MspInit+0x4c>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_MspInit+0x4c>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a3a      	ldr	r2, [pc, #232]	; (800125c <HAL_ADC_MspInit+0x108>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10e      	bne.n	8001194 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <HAL_ADC_MspInit+0x10c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a38      	ldr	r2, [pc, #224]	; (8001260 <HAL_ADC_MspInit+0x10c>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <HAL_ADC_MspInit+0x10c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001192:	e05e      	b.n	8001252 <HAL_ADC_MspInit+0xfe>
  else if(hadc->Instance==ADC2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a32      	ldr	r2, [pc, #200]	; (8001264 <HAL_ADC_MspInit+0x110>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d159      	bne.n	8001252 <HAL_ADC_MspInit+0xfe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_ADC_MspInit+0x10c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a2e      	ldr	r2, [pc, #184]	; (8001260 <HAL_ADC_MspInit+0x10c>)
 80011a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <HAL_ADC_MspInit+0x10c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <HAL_ADC_MspInit+0x10c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a27      	ldr	r2, [pc, #156]	; (8001260 <HAL_ADC_MspInit+0x10c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_ADC_MspInit+0x10c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d6:	2301      	movs	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	481f      	ldr	r0, [pc, #124]	; (8001268 <HAL_ADC_MspInit+0x114>)
 80011ea:	f001 fb3d 	bl	8002868 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_ADC_MspInit+0x118>)
 80011f0:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_ADC_MspInit+0x11c>)
 80011f2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_ADC_MspInit+0x118>)
 80011f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_ADC_MspInit+0x118>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_ADC_MspInit+0x118>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_ADC_MspInit+0x118>)
 800120a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_ADC_MspInit+0x118>)
 8001212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001216:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_ADC_MspInit+0x118>)
 800121a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_ADC_MspInit+0x118>)
 8001222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001226:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_ADC_MspInit+0x118>)
 800122a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800122e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_ADC_MspInit+0x118>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <HAL_ADC_MspInit+0x118>)
 8001238:	f000 ffa8 	bl	800218c <HAL_DMA_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_ADC_MspInit+0xf2>
      Error_Handler();
 8001242:	f7ff ff57 	bl	80010f4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a08      	ldr	r2, [pc, #32]	; (800126c <HAL_ADC_MspInit+0x118>)
 800124a:	639a      	str	r2, [r3, #56]	; 0x38
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_ADC_MspInit+0x118>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40012000 	.word	0x40012000
 8001260:	40023800 	.word	0x40023800
 8001264:	40012100 	.word	0x40012100
 8001268:	40020000 	.word	0x40020000
 800126c:	200000c4 	.word	0x200000c4
 8001270:	40026440 	.word	0x40026440

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f89e 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <DMA2_Stream2_IRQHandler+0x10>)
 80012d6:	f001 f85f 	bl	8002398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200000c4 	.word	0x200000c4

080012e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <SystemInit+0x28>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a07      	ldr	r2, [pc, #28]	; (800130c <SystemInit+0x28>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <SystemInit+0x28>)
 80012fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001348 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001314:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001316:	e003      	b.n	8001320 <LoopCopyDataInit>

08001318 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800131a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800131c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800131e:	3104      	adds	r1, #4

08001320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001324:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001326:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001328:	d3f6      	bcc.n	8001318 <CopyDataInit>
  ldr  r2, =_sbss
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800132c:	e002      	b.n	8001334 <LoopFillZerobss>

0800132e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800132e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001330:	f842 3b04 	str.w	r3, [r2], #4

08001334 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001336:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001338:	d3f9      	bcc.n	800132e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800133a:	f7ff ffd3 	bl	80012e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133e:	f002 f8bb 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001342:	f7ff fd51 	bl	8000de8 <main>
  bx  lr    
 8001346:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001348:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800134c:	08003550 	.word	0x08003550
  ldr  r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001354:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001358:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800135c:	2000012c 	.word	0x2000012c

08001360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC_IRQHandler>
	...

08001364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_Init+0x40>)
 800136e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001372:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_Init+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_Init+0x40>)
 800137a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_Init+0x40>)
 8001386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 febb 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff feb4 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fed3 	bl	8002172 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 fe9b 	bl	800211e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000008 	.word	0x20000008
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008
 800142c:	20000128 	.word	0x20000128

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000128 	.word	0x20000128

08001448 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e033      	b.n	80014c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fe74 	bl	8001154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800148e:	f023 0302 	bic.w	r3, r3, #2
 8001492:	f043 0202 	orr.w	r2, r3, #2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fbe6 	bl	8001c6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	f043 0201 	orr.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
 80014b6:	e001      	b.n	80014bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Start+0x1a>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e0a5      	b.n	8001636 <HAL_ADC_Start+0x166>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d018      	beq.n	8001532 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001510:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <HAL_ADC_Start+0x174>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a4c      	ldr	r2, [pc, #304]	; (8001648 <HAL_ADC_Start+0x178>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9a      	lsrs	r2, r3, #18
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001524:	e002      	b.n	800152c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3b01      	subs	r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d179      	bne.n	8001634 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800156a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800157e:	d106      	bne.n	800158e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	f023 0206 	bic.w	r2, r3, #6
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	645a      	str	r2, [r3, #68]	; 0x44
 800158c:	e002      	b.n	8001594 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_ADC_Start+0x17c>)
 800159e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d12a      	bne.n	800160c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a25      	ldr	r2, [pc, #148]	; (8001650 <HAL_ADC_Start+0x180>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d015      	beq.n	80015ec <HAL_ADC_Start+0x11c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a23      	ldr	r2, [pc, #140]	; (8001654 <HAL_ADC_Start+0x184>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_Start+0x106>
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_ADC_Start+0x17c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <HAL_ADC_Start+0x188>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d129      	bne.n	8001634 <HAL_ADC_Start+0x164>
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_ADC_Start+0x17c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 031f 	and.w	r3, r3, #31
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d823      	bhi.n	8001634 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d11c      	bne.n	8001634 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	e013      	b.n	8001634 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_ADC_Start+0x180>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10e      	bne.n	8001634 <HAL_ADC_Start+0x164>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d107      	bne.n	8001634 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001632:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000000 	.word	0x20000000
 8001648:	431bde83 	.word	0x431bde83
 800164c:	40012300 	.word	0x40012300
 8001650:	40012000 	.word	0x40012000
 8001654:	40012100 	.word	0x40012100
 8001658:	40012200 	.word	0x40012200

0800165c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Stop+0x16>
 800166e:	2302      	movs	r3, #2
 8001670:	e021      	b.n	80016b6 <HAL_ADC_Stop+0x5a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016de:	d113      	bne.n	8001708 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ee:	d10b      	bne.n	8001708 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f043 0220 	orr.w	r2, r3, #32
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e05c      	b.n	80017c2 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001708:	f7ff fe92 	bl	8001430 <HAL_GetTick>
 800170c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800170e:	e01a      	b.n	8001746 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001716:	d016      	beq.n	8001746 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_ADC_PollForConversion+0x6c>
 800171e:	f7ff fe87 	bl	8001430 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d20b      	bcs.n	8001746 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f043 0204 	orr.w	r2, r3, #4
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e03d      	b.n	80017c2 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b02      	cmp	r3, #2
 8001752:	d1dd      	bne.n	8001710 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0212 	mvn.w	r2, #18
 800175c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d123      	bne.n	80017c0 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800177c:	2b00      	cmp	r3, #0
 800177e:	d11f      	bne.n	80017c0 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001798:	2b00      	cmp	r3, #0
 800179a:	d111      	bne.n	80017c0 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Start_DMA+0x1e>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e0cc      	b.n	8001984 <HAL_ADC_Start_DMA+0x1b8>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d018      	beq.n	8001832 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001810:	4b5e      	ldr	r3, [pc, #376]	; (800198c <HAL_ADC_Start_DMA+0x1c0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a5e      	ldr	r2, [pc, #376]	; (8001990 <HAL_ADC_Start_DMA+0x1c4>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0c9a      	lsrs	r2, r3, #18
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001824:	e002      	b.n	800182c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	3b01      	subs	r3, #1
 800182a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f9      	bne.n	8001826 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	f040 80a0 	bne.w	8001982 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800186c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001880:	d106      	bne.n	8001890 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f023 0206 	bic.w	r2, r3, #6
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
 800188e:	e002      	b.n	8001896 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_ADC_Start_DMA+0x1c8>)
 80018a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	4a3c      	ldr	r2, [pc, #240]	; (8001998 <HAL_ADC_Start_DMA+0x1cc>)
 80018a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	4a3b      	ldr	r2, [pc, #236]	; (800199c <HAL_ADC_Start_DMA+0x1d0>)
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	4a3a      	ldr	r2, [pc, #232]	; (80019a0 <HAL_ADC_Start_DMA+0x1d4>)
 80018b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	334c      	adds	r3, #76	; 0x4c
 80018ee:	4619      	mov	r1, r3
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f000 fcf8 	bl	80022e8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2b00      	cmp	r3, #0
 8001902:	d12a      	bne.n	800195a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <HAL_ADC_Start_DMA+0x1d8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d015      	beq.n	800193a <HAL_ADC_Start_DMA+0x16e>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <HAL_ADC_Start_DMA+0x1dc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d105      	bne.n	8001924 <HAL_ADC_Start_DMA+0x158>
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_ADC_Start_DMA+0x1c8>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00a      	beq.n	800193a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a20      	ldr	r2, [pc, #128]	; (80019ac <HAL_ADC_Start_DMA+0x1e0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d129      	bne.n	8001982 <HAL_ADC_Start_DMA+0x1b6>
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_ADC_Start_DMA+0x1c8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	2b0f      	cmp	r3, #15
 8001938:	d823      	bhi.n	8001982 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d11c      	bne.n	8001982 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	e013      	b.n	8001982 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_ADC_Start_DMA+0x1d8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d10e      	bne.n	8001982 <HAL_ADC_Start_DMA+0x1b6>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001980:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000000 	.word	0x20000000
 8001990:	431bde83 	.word	0x431bde83
 8001994:	40012300 	.word	0x40012300
 8001998:	08001e65 	.word	0x08001e65
 800199c:	08001f1f 	.word	0x08001f1f
 80019a0:	08001f3b 	.word	0x08001f3b
 80019a4:	40012000 	.word	0x40012000
 80019a8:	40012100 	.word	0x40012100
 80019ac:	40012200 	.word	0x40012200

080019b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x1c>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e113      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x244>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b09      	cmp	r3, #9
 8001a32:	d925      	bls.n	8001a80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68d9      	ldr	r1, [r3, #12]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	3b1e      	subs	r3, #30
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43da      	mvns	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	400a      	ands	r2, r1
 8001a58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68d9      	ldr	r1, [r3, #12]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4403      	add	r3, r0
 8001a72:	3b1e      	subs	r3, #30
 8001a74:	409a      	lsls	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	e022      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6919      	ldr	r1, [r3, #16]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	2207      	movs	r2, #7
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6919      	ldr	r1, [r3, #16]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4403      	add	r3, r0
 8001abc:	409a      	lsls	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d824      	bhi.n	8001b18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	3b05      	subs	r3, #5
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	400a      	ands	r2, r1
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	3b05      	subs	r3, #5
 8001b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34
 8001b16:	e04c      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b0c      	cmp	r3, #12
 8001b1e:	d824      	bhi.n	8001b6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b23      	subs	r3, #35	; 0x23
 8001b32:	221f      	movs	r2, #31
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43da      	mvns	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	400a      	ands	r2, r1
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b23      	subs	r3, #35	; 0x23
 8001b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
 8001b68:	e023      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b41      	subs	r3, #65	; 0x41
 8001b7c:	221f      	movs	r2, #31
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	400a      	ands	r2, r1
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b41      	subs	r3, #65	; 0x41
 8001ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_ADC_ConfigChannel+0x250>)
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a28      	ldr	r2, [pc, #160]	; (8001c5c <HAL_ADC_ConfigChannel+0x254>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d10f      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1d8>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b12      	cmp	r3, #18
 8001bc6:	d10b      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <HAL_ADC_ConfigChannel+0x254>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12b      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x23a>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <HAL_ADC_ConfigChannel+0x258>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d003      	beq.n	8001bfc <HAL_ADC_ConfigChannel+0x1f4>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b11      	cmp	r3, #17
 8001bfa:	d122      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_ADC_ConfigChannel+0x258>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d111      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_ADC_ConfigChannel+0x25c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_ADC_ConfigChannel+0x260>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9a      	lsrs	r2, r3, #18
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c34:	e002      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f9      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40012300 	.word	0x40012300
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	10000012 	.word	0x10000012
 8001c64:	20000000 	.word	0x20000000
 8001c68:	431bde83 	.word	0x431bde83

08001c6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c74:	4b79      	ldr	r3, [pc, #484]	; (8001e5c <ADC_Init+0x1f0>)
 8001c76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	021a      	lsls	r2, r3, #8
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6899      	ldr	r1, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	4a58      	ldr	r2, [pc, #352]	; (8001e60 <ADC_Init+0x1f4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d022      	beq.n	8001d4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6899      	ldr	r1, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6899      	ldr	r1, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	e00f      	b.n	8001d6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0202 	bic.w	r2, r2, #2
 8001d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6899      	ldr	r1, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7e1b      	ldrb	r3, [r3, #24]
 8001d84:	005a      	lsls	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01b      	beq.n	8001dd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001db6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6859      	ldr	r1, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	035a      	lsls	r2, r3, #13
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	e007      	b.n	8001de0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	051a      	lsls	r2, r3, #20
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6899      	ldr	r1, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e22:	025a      	lsls	r2, r3, #9
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6899      	ldr	r1, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	029a      	lsls	r2, r3, #10
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40012300 	.word	0x40012300
 8001e60:	0f000001 	.word	0x0f000001

08001e64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d13c      	bne.n	8001ef8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d12b      	bne.n	8001ef0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d127      	bne.n	8001ef0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d119      	bne.n	8001ef0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0220 	bic.w	r2, r2, #32
 8001eca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff fd6a 	bl	80019ca <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ef6:	e00e      	b.n	8001f16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff fd74 	bl	80019f2 <HAL_ADC_ErrorCallback>
}
 8001f0a:	e004      	b.n	8001f16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff fd56 	bl	80019de <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f043 0204 	orr.w	r2, r3, #4
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7ff fd49 	bl	80019f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4907      	ldr	r1, [pc, #28]	; (8002004 <__NVIC_EnableIRQ+0x38>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	; (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d4:	d301      	bcc.n	80020da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <SysTick_Config+0x40>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e2:	210f      	movs	r1, #15
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f7ff ff8e 	bl	8002008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <SysTick_Config+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <SysTick_Config+0x40>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010

08002108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff29 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff3e 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff8e 	bl	800205c <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5d 	bl	8002008 <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff31 	bl	8001fcc <__NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffa2 	bl	80020c4 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff f94a 	bl	8001430 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e099      	b.n	80022dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0201 	bic.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c8:	e00f      	b.n	80021ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ca:	f7ff f931 	bl	8001430 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d908      	bls.n	80021ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2203      	movs	r2, #3
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e078      	b.n	80022dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e8      	bne.n	80021ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <HAL_DMA_Init+0x158>)
 8002204:	4013      	ands	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002216:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	2b04      	cmp	r3, #4
 8002242:	d107      	bne.n	8002254 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4313      	orrs	r3, r2
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f023 0307 	bic.w	r3, r3, #7
 800226a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	2b04      	cmp	r3, #4
 800227c:	d117      	bne.n	80022ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00e      	beq.n	80022ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fa6f 	bl	8002774 <DMA_CheckFifoParam>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022aa:	2301      	movs	r3, #1
 80022ac:	e016      	b.n	80022dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fa26 	bl	8002708 <DMA_CalcBaseAndBitshift>
 80022bc:	4603      	mov	r3, r0
 80022be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	223f      	movs	r2, #63	; 0x3f
 80022c6:	409a      	lsls	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	f010803f 	.word	0xf010803f

080022e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_DMA_Start_IT+0x26>
 800230a:	2302      	movs	r3, #2
 800230c:	e040      	b.n	8002390 <HAL_DMA_Start_IT+0xa8>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d12f      	bne.n	8002382 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f9b8 	bl	80026ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	223f      	movs	r2, #63	; 0x3f
 8002342:	409a      	lsls	r2, r3
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0216 	orr.w	r2, r2, #22
 8002356:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0208 	orr.w	r2, r2, #8
 800236e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e005      	b.n	800238e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800238a:	2302      	movs	r3, #2
 800238c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800238e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <HAL_DMA_IRQHandler+0x258>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a92      	ldr	r2, [pc, #584]	; (80025f4 <HAL_DMA_IRQHandler+0x25c>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0a9b      	lsrs	r3, r3, #10
 80023b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	2208      	movs	r2, #8
 80023c4:	409a      	lsls	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01a      	beq.n	8002404 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0204 	bic.w	r2, r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	2208      	movs	r2, #8
 80023f2:	409a      	lsls	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2201      	movs	r2, #1
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d012      	beq.n	800243a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	2201      	movs	r2, #1
 8002428:	409a      	lsls	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	2204      	movs	r2, #4
 8002440:	409a      	lsls	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d012      	beq.n	8002470 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	2204      	movs	r2, #4
 800245e:	409a      	lsls	r2, r3
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f043 0204 	orr.w	r2, r3, #4
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	2210      	movs	r2, #16
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d043      	beq.n	8002508 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d03c      	beq.n	8002508 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	2210      	movs	r2, #16
 8002494:	409a      	lsls	r2, r3
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d018      	beq.n	80024da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d024      	beq.n	8002508 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
 80024c6:	e01f      	b.n	8002508 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
 80024d8:	e016      	b.n	8002508 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0208 	bic.w	r2, r2, #8
 80024f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	2220      	movs	r2, #32
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 808e 	beq.w	8002636 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8086 	beq.w	8002636 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	2220      	movs	r2, #32
 8002530:	409a      	lsls	r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b05      	cmp	r3, #5
 8002540:	d136      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0216 	bic.w	r2, r2, #22
 8002550:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002560:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <HAL_DMA_IRQHandler+0x1da>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0208 	bic.w	r2, r2, #8
 8002580:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	223f      	movs	r2, #63	; 0x3f
 8002588:	409a      	lsls	r2, r3
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d07d      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
        }
        return;
 80025ae:	e078      	b.n	80026a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01c      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d108      	bne.n	80025de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d030      	beq.n	8002636 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
 80025dc:	e02b      	b.n	8002636 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d027      	beq.n	8002636 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
 80025ee:	e022      	b.n	8002636 <HAL_DMA_IRQHandler+0x29e>
 80025f0:	20000000 	.word	0x20000000
 80025f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10f      	bne.n	8002626 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0210 	bic.w	r2, r2, #16
 8002614:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	2b00      	cmp	r3, #0
 800263c:	d032      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d022      	beq.n	8002690 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2205      	movs	r2, #5
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3301      	adds	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	429a      	cmp	r2, r3
 800266c:	d307      	bcc.n	800267e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f2      	bne.n	8002662 <HAL_DMA_IRQHandler+0x2ca>
 800267c:	e000      	b.n	8002680 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800267e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e000      	b.n	80026a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026a2:	bf00      	nop
    }
  }
}
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop

080026ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d108      	bne.n	80026ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026ea:	e007      	b.n	80026fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	3b10      	subs	r3, #16
 8002718:	4a14      	ldr	r2, [pc, #80]	; (800276c <DMA_CalcBaseAndBitshift+0x64>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <DMA_CalcBaseAndBitshift+0x68>)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d909      	bls.n	800274a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	1d1a      	adds	r2, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	659a      	str	r2, [r3, #88]	; 0x58
 8002748:	e007      	b.n	800275a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	aaaaaaab 	.word	0xaaaaaaab
 8002770:	08003538 	.word	0x08003538

08002774 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11f      	bne.n	80027ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d855      	bhi.n	8002840 <DMA_CheckFifoParam+0xcc>
 8002794:	a201      	add	r2, pc, #4	; (adr r2, 800279c <DMA_CheckFifoParam+0x28>)
 8002796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279a:	bf00      	nop
 800279c:	080027ad 	.word	0x080027ad
 80027a0:	080027bf 	.word	0x080027bf
 80027a4:	080027ad 	.word	0x080027ad
 80027a8:	08002841 	.word	0x08002841
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d045      	beq.n	8002844 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027bc:	e042      	b.n	8002844 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c6:	d13f      	bne.n	8002848 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027cc:	e03c      	b.n	8002848 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d6:	d121      	bne.n	800281c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d836      	bhi.n	800284c <DMA_CheckFifoParam+0xd8>
 80027de:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <DMA_CheckFifoParam+0x70>)
 80027e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e4:	080027f5 	.word	0x080027f5
 80027e8:	080027fb 	.word	0x080027fb
 80027ec:	080027f5 	.word	0x080027f5
 80027f0:	0800280d 	.word	0x0800280d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
      break;
 80027f8:	e02f      	b.n	800285a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d024      	beq.n	8002850 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280a:	e021      	b.n	8002850 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002814:	d11e      	bne.n	8002854 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800281a:	e01b      	b.n	8002854 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d902      	bls.n	8002828 <DMA_CheckFifoParam+0xb4>
 8002822:	2b03      	cmp	r3, #3
 8002824:	d003      	beq.n	800282e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002826:	e018      	b.n	800285a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      break;
 800282c:	e015      	b.n	800285a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00e      	beq.n	8002858 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      break;
 800283e:	e00b      	b.n	8002858 <DMA_CheckFifoParam+0xe4>
      break;
 8002840:	bf00      	nop
 8002842:	e00a      	b.n	800285a <DMA_CheckFifoParam+0xe6>
      break;
 8002844:	bf00      	nop
 8002846:	e008      	b.n	800285a <DMA_CheckFifoParam+0xe6>
      break;
 8002848:	bf00      	nop
 800284a:	e006      	b.n	800285a <DMA_CheckFifoParam+0xe6>
      break;
 800284c:	bf00      	nop
 800284e:	e004      	b.n	800285a <DMA_CheckFifoParam+0xe6>
      break;
 8002850:	bf00      	nop
 8002852:	e002      	b.n	800285a <DMA_CheckFifoParam+0xe6>
      break;   
 8002854:	bf00      	nop
 8002856:	e000      	b.n	800285a <DMA_CheckFifoParam+0xe6>
      break;
 8002858:	bf00      	nop
    }
  } 
  
  return status; 
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	e177      	b.n	8002b74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	429a      	cmp	r2, r3
 800289e:	f040 8166 	bne.w	8002b6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d00b      	beq.n	80028c2 <HAL_GPIO_Init+0x5a>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d007      	beq.n	80028c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b6:	2b11      	cmp	r3, #17
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b12      	cmp	r3, #18
 80028c0:	d130      	bne.n	8002924 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 0201 	and.w	r2, r3, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0xfc>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b12      	cmp	r3, #18
 8002962:	d123      	bne.n	80029ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	08da      	lsrs	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3208      	adds	r2, #8
 800296c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	220f      	movs	r2, #15
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	08da      	lsrs	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3208      	adds	r2, #8
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80c0 	beq.w	8002b6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <HAL_GPIO_Init+0x320>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a64      	ldr	r2, [pc, #400]	; (8002b88 <HAL_GPIO_Init+0x320>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b62      	ldr	r3, [pc, #392]	; (8002b88 <HAL_GPIO_Init+0x320>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0a:	4a60      	ldr	r2, [pc, #384]	; (8002b8c <HAL_GPIO_Init+0x324>)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	3302      	adds	r3, #2
 8002a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	220f      	movs	r2, #15
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a57      	ldr	r2, [pc, #348]	; (8002b90 <HAL_GPIO_Init+0x328>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d037      	beq.n	8002aa6 <HAL_GPIO_Init+0x23e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a56      	ldr	r2, [pc, #344]	; (8002b94 <HAL_GPIO_Init+0x32c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d031      	beq.n	8002aa2 <HAL_GPIO_Init+0x23a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a55      	ldr	r2, [pc, #340]	; (8002b98 <HAL_GPIO_Init+0x330>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d02b      	beq.n	8002a9e <HAL_GPIO_Init+0x236>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a54      	ldr	r2, [pc, #336]	; (8002b9c <HAL_GPIO_Init+0x334>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d025      	beq.n	8002a9a <HAL_GPIO_Init+0x232>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a53      	ldr	r2, [pc, #332]	; (8002ba0 <HAL_GPIO_Init+0x338>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <HAL_GPIO_Init+0x22e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a52      	ldr	r2, [pc, #328]	; (8002ba4 <HAL_GPIO_Init+0x33c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d019      	beq.n	8002a92 <HAL_GPIO_Init+0x22a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a51      	ldr	r2, [pc, #324]	; (8002ba8 <HAL_GPIO_Init+0x340>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x226>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a50      	ldr	r2, [pc, #320]	; (8002bac <HAL_GPIO_Init+0x344>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_Init+0x222>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4f      	ldr	r2, [pc, #316]	; (8002bb0 <HAL_GPIO_Init+0x348>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x21e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4e      	ldr	r2, [pc, #312]	; (8002bb4 <HAL_GPIO_Init+0x34c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_Init+0x21a>
 8002a7e:	2309      	movs	r3, #9
 8002a80:	e012      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a82:	230a      	movs	r3, #10
 8002a84:	e010      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a86:	2308      	movs	r3, #8
 8002a88:	e00e      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	e00c      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a8e:	2306      	movs	r3, #6
 8002a90:	e00a      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a92:	2305      	movs	r3, #5
 8002a94:	e008      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e004      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	4093      	lsls	r3, r2
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab8:	4934      	ldr	r1, [pc, #208]	; (8002b8c <HAL_GPIO_Init+0x324>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac6:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <HAL_GPIO_Init+0x350>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aea:	4a33      	ldr	r2, [pc, #204]	; (8002bb8 <HAL_GPIO_Init+0x350>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <HAL_GPIO_Init+0x350>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b14:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <HAL_GPIO_Init+0x350>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1a:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HAL_GPIO_Init+0x350>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3e:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <HAL_GPIO_Init+0x350>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b44:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <HAL_GPIO_Init+0x350>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b68:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <HAL_GPIO_Init+0x350>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3301      	adds	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	f67f ae84 	bls.w	8002884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3724      	adds	r7, #36	; 0x24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020c00 	.word	0x40020c00
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40021400 	.word	0x40021400
 8002ba8:	40021800 	.word	0x40021800
 8002bac:	40021c00 	.word	0x40021c00
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	40022400 	.word	0x40022400
 8002bb8:	40013c00 	.word	0x40013c00

08002bbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_PWREx_EnableOverDrive+0x94>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be8:	f7fe fc22 	bl	8001430 <HAL_GetTick>
 8002bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bee:	e009      	b.n	8002c04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bf0:	f7fe fc1e 	bl	8001430 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bfe:	d901      	bls.n	8002c04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e01f      	b.n	8002c44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c04:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c18:	f7fe fc0a 	bl	8001430 <HAL_GetTick>
 8002c1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c1e:	e009      	b.n	8002c34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c20:	f7fe fc06 	bl	8001430 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c2e:	d901      	bls.n	8002c34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e007      	b.n	8002c44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c34:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c40:	d1ee      	bne.n	8002c20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	420e0040 	.word	0x420e0040
 8002c54:	40007000 	.word	0x40007000
 8002c58:	420e0044 	.word	0x420e0044

08002c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e25b      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d075      	beq.n	8002d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7a:	4ba3      	ldr	r3, [pc, #652]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d00c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c86:	4ba0      	ldr	r3, [pc, #640]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d112      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4b9d      	ldr	r3, [pc, #628]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	4b99      	ldr	r3, [pc, #612]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d05b      	beq.n	8002d64 <HAL_RCC_OscConfig+0x108>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d157      	bne.n	8002d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e236      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x74>
 8002cc2:	4b91      	ldr	r3, [pc, #580]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a90      	ldr	r2, [pc, #576]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e01d      	b.n	8002d0c <HAL_RCC_OscConfig+0xb0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x98>
 8002cda:	4b8b      	ldr	r3, [pc, #556]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a8a      	ldr	r2, [pc, #552]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a87      	ldr	r2, [pc, #540]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0xb0>
 8002cf4:	4b84      	ldr	r3, [pc, #528]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a83      	ldr	r2, [pc, #524]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b81      	ldr	r3, [pc, #516]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a80      	ldr	r2, [pc, #512]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d013      	beq.n	8002d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fb8c 	bl	8001430 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7fe fb88 	bl	8001430 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	; 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1fb      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b76      	ldr	r3, [pc, #472]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0xc0>
 8002d3a:	e014      	b.n	8002d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fb78 	bl	8001430 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fe fb74 	bl	8001430 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	; 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1e7      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	4b6c      	ldr	r3, [pc, #432]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0xe8>
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d063      	beq.n	8002e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d72:	4b65      	ldr	r3, [pc, #404]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7e:	4b62      	ldr	r3, [pc, #392]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d11c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b5f      	ldr	r3, [pc, #380]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	4b5c      	ldr	r3, [pc, #368]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x152>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e1bb      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4b56      	ldr	r3, [pc, #344]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4952      	ldr	r1, [pc, #328]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	e03a      	b.n	8002e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dcc:	4b4f      	ldr	r3, [pc, #316]	; (8002f0c <HAL_RCC_OscConfig+0x2b0>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fb2d 	bl	8001430 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dda:	f7fe fb29 	bl	8001430 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e19c      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df8:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4940      	ldr	r1, [pc, #256]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0e:	4b3f      	ldr	r3, [pc, #252]	; (8002f0c <HAL_RCC_OscConfig+0x2b0>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fb0c 	bl	8001430 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7fe fb08 	bl	8001430 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e17b      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d030      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4e:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <HAL_RCC_OscConfig+0x2b4>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe faec 	bl	8001430 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fae8 	bl	8001430 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e15b      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x200>
 8002e7a:	e015      	b.n	8002ea8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7c:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_RCC_OscConfig+0x2b4>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fad5 	bl	8001430 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7fe fad1 	bl	8001430 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e144      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f0      	bne.n	8002e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a0 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a0e      	ldr	r2, [pc, #56]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_OscConfig+0x2b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d121      	bne.n	8002f36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_RCC_OscConfig+0x2b8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a07      	ldr	r2, [pc, #28]	; (8002f14 <HAL_RCC_OscConfig+0x2b8>)
 8002ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efe:	f7fe fa97 	bl	8001430 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f04:	e011      	b.n	8002f2a <HAL_RCC_OscConfig+0x2ce>
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	42470000 	.word	0x42470000
 8002f10:	42470e80 	.word	0x42470e80
 8002f14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f18:	f7fe fa8a 	bl	8001430 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0fd      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	4b81      	ldr	r3, [pc, #516]	; (8003130 <HAL_RCC_OscConfig+0x4d4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d106      	bne.n	8002f4c <HAL_RCC_OscConfig+0x2f0>
 8002f3e:	4b7d      	ldr	r3, [pc, #500]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	4a7c      	ldr	r2, [pc, #496]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4a:	e01c      	b.n	8002f86 <HAL_RCC_OscConfig+0x32a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d10c      	bne.n	8002f6e <HAL_RCC_OscConfig+0x312>
 8002f54:	4b77      	ldr	r3, [pc, #476]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a76      	ldr	r2, [pc, #472]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f60:	4b74      	ldr	r3, [pc, #464]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4a73      	ldr	r2, [pc, #460]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCC_OscConfig+0x32a>
 8002f6e:	4b71      	ldr	r3, [pc, #452]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a70      	ldr	r2, [pc, #448]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	4b6e      	ldr	r3, [pc, #440]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a6d      	ldr	r2, [pc, #436]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d015      	beq.n	8002fba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fa4f 	bl	8001430 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe fa4b 	bl	8001430 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0bc      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	4b61      	ldr	r3, [pc, #388]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ee      	beq.n	8002f96 <HAL_RCC_OscConfig+0x33a>
 8002fb8:	e014      	b.n	8002fe4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fa39 	bl	8001430 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7fe fa35 	bl	8001430 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0a6      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd8:	4b56      	ldr	r3, [pc, #344]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ee      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fea:	4b52      	ldr	r3, [pc, #328]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a51      	ldr	r2, [pc, #324]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8002ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8092 	beq.w	8003124 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003000:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d05c      	beq.n	80030c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d141      	bne.n	8003098 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003014:	4b48      	ldr	r3, [pc, #288]	; (8003138 <HAL_RCC_OscConfig+0x4dc>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe fa09 	bl	8001430 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003022:	f7fe fa05 	bl	8001430 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e078      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003034:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	019b      	lsls	r3, r3, #6
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	3b01      	subs	r3, #1
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	061b      	lsls	r3, r3, #24
 8003064:	4933      	ldr	r1, [pc, #204]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306a:	4b33      	ldr	r3, [pc, #204]	; (8003138 <HAL_RCC_OscConfig+0x4dc>)
 800306c:	2201      	movs	r2, #1
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe f9de 	bl	8001430 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003078:	f7fe f9da 	bl	8001430 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e04d      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x41c>
 8003096:	e045      	b.n	8003124 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_RCC_OscConfig+0x4dc>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7fe f9c7 	bl	8001430 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a6:	f7fe f9c3 	bl	8001430 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e036      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b8:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f0      	bne.n	80030a6 <HAL_RCC_OscConfig+0x44a>
 80030c4:	e02e      	b.n	8003124 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e029      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <HAL_RCC_OscConfig+0x4d8>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d11c      	bne.n	8003120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d115      	bne.n	8003120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030fa:	4013      	ands	r3, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003100:	4293      	cmp	r3, r2
 8003102:	d10d      	bne.n	8003120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d106      	bne.n	8003120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40007000 	.word	0x40007000
 8003134:	40023800 	.word	0x40023800
 8003138:	42470060 	.word	0x42470060

0800313c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0cc      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003150:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d90c      	bls.n	8003178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b65      	ldr	r3, [pc, #404]	; (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b63      	ldr	r3, [pc, #396]	; (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0b8      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d020      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003190:	4b59      	ldr	r3, [pc, #356]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4a58      	ldr	r2, [pc, #352]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800319a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a8:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b4:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	494d      	ldr	r1, [pc, #308]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d044      	beq.n	800325c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d119      	bne.n	800321a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e07f      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d003      	beq.n	80031fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fa:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e06f      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320a:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e067      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321a:	4b37      	ldr	r3, [pc, #220]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 0203 	bic.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4934      	ldr	r1, [pc, #208]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	4313      	orrs	r3, r2
 800322a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800322c:	f7fe f900 	bl	8001430 <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	e00a      	b.n	800324a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003234:	f7fe f8fc 	bl	8001430 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e04f      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 020c 	and.w	r2, r3, #12
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	429a      	cmp	r2, r3
 800325a:	d1eb      	bne.n	8003234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d20c      	bcs.n	8003284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e032      	b.n	80032ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4916      	ldr	r1, [pc, #88]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	490e      	ldr	r1, [pc, #56]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032c2:	f000 f821 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 80032c6:	4601      	mov	r1, r0
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	5cd3      	ldrb	r3, [r2, r3]
 80032d6:	fa21 f303 	lsr.w	r3, r1, r3
 80032da:	4a09      	ldr	r2, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1c8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe f860 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40023c00 	.word	0x40023c00
 80032f8:	40023800 	.word	0x40023800
 80032fc:	08003528 	.word	0x08003528
 8003300:	20000000 	.word	0x20000000
 8003304:	20000004 	.word	0x20000004

08003308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	607b      	str	r3, [r7, #4]
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	2300      	movs	r3, #0
 8003318:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b04      	cmp	r3, #4
 8003328:	d007      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x32>
 800332a:	2b08      	cmp	r3, #8
 800332c:	d008      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x38>
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 80b4 	bne.w	800349c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b5e      	ldr	r3, [pc, #376]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003336:	60bb      	str	r3, [r7, #8]
       break;
 8003338:	e0b3      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800333a:	4b5e      	ldr	r3, [pc, #376]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800333c:	60bb      	str	r3, [r7, #8]
      break;
 800333e:	e0b0      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003340:	4b5a      	ldr	r3, [pc, #360]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003348:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334a:	4b58      	ldr	r3, [pc, #352]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d04a      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003356:	4b55      	ldr	r3, [pc, #340]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	099b      	lsrs	r3, r3, #6
 800335c:	f04f 0400 	mov.w	r4, #0
 8003360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	ea03 0501 	and.w	r5, r3, r1
 800336c:	ea04 0602 	and.w	r6, r4, r2
 8003370:	4629      	mov	r1, r5
 8003372:	4632      	mov	r2, r6
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	0154      	lsls	r4, r2, #5
 800337e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003382:	014b      	lsls	r3, r1, #5
 8003384:	4619      	mov	r1, r3
 8003386:	4622      	mov	r2, r4
 8003388:	1b49      	subs	r1, r1, r5
 800338a:	eb62 0206 	sbc.w	r2, r2, r6
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	f04f 0400 	mov.w	r4, #0
 8003396:	0194      	lsls	r4, r2, #6
 8003398:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800339c:	018b      	lsls	r3, r1, #6
 800339e:	1a5b      	subs	r3, r3, r1
 80033a0:	eb64 0402 	sbc.w	r4, r4, r2
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	00e2      	lsls	r2, r4, #3
 80033ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033b2:	00d9      	lsls	r1, r3, #3
 80033b4:	460b      	mov	r3, r1
 80033b6:	4614      	mov	r4, r2
 80033b8:	195b      	adds	r3, r3, r5
 80033ba:	eb44 0406 	adc.w	r4, r4, r6
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	0262      	lsls	r2, r4, #9
 80033c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80033cc:	0259      	lsls	r1, r3, #9
 80033ce:	460b      	mov	r3, r1
 80033d0:	4614      	mov	r4, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	4621      	mov	r1, r4
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f04f 0400 	mov.w	r4, #0
 80033dc:	461a      	mov	r2, r3
 80033de:	4623      	mov	r3, r4
 80033e0:	f7fd fb24 	bl	8000a2c <__aeabi_uldivmod>
 80033e4:	4603      	mov	r3, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e049      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ec:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	f04f 0400 	mov.w	r4, #0
 80033f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	ea03 0501 	and.w	r5, r3, r1
 8003402:	ea04 0602 	and.w	r6, r4, r2
 8003406:	4629      	mov	r1, r5
 8003408:	4632      	mov	r2, r6
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	f04f 0400 	mov.w	r4, #0
 8003412:	0154      	lsls	r4, r2, #5
 8003414:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003418:	014b      	lsls	r3, r1, #5
 800341a:	4619      	mov	r1, r3
 800341c:	4622      	mov	r2, r4
 800341e:	1b49      	subs	r1, r1, r5
 8003420:	eb62 0206 	sbc.w	r2, r2, r6
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	f04f 0400 	mov.w	r4, #0
 800342c:	0194      	lsls	r4, r2, #6
 800342e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003432:	018b      	lsls	r3, r1, #6
 8003434:	1a5b      	subs	r3, r3, r1
 8003436:	eb64 0402 	sbc.w	r4, r4, r2
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	00e2      	lsls	r2, r4, #3
 8003444:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003448:	00d9      	lsls	r1, r3, #3
 800344a:	460b      	mov	r3, r1
 800344c:	4614      	mov	r4, r2
 800344e:	195b      	adds	r3, r3, r5
 8003450:	eb44 0406 	adc.w	r4, r4, r6
 8003454:	f04f 0100 	mov.w	r1, #0
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	02a2      	lsls	r2, r4, #10
 800345e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003462:	0299      	lsls	r1, r3, #10
 8003464:	460b      	mov	r3, r1
 8003466:	4614      	mov	r4, r2
 8003468:	4618      	mov	r0, r3
 800346a:	4621      	mov	r1, r4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f04f 0400 	mov.w	r4, #0
 8003472:	461a      	mov	r2, r3
 8003474:	4623      	mov	r3, r4
 8003476:	f7fd fad9 	bl	8000a2c <__aeabi_uldivmod>
 800347a:	4603      	mov	r3, r0
 800347c:	460c      	mov	r4, r1
 800347e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	3301      	adds	r3, #1
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	60bb      	str	r3, [r7, #8]
      break;
 800349a:	e002      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800349e:	60bb      	str	r3, [r7, #8]
      break;
 80034a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a2:	68bb      	ldr	r3, [r7, #8]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	007a1200 	.word	0x007a1200

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	4e0d      	ldr	r6, [pc, #52]	; (80034f0 <__libc_init_array+0x38>)
 80034bc:	4c0d      	ldr	r4, [pc, #52]	; (80034f4 <__libc_init_array+0x3c>)
 80034be:	1ba4      	subs	r4, r4, r6
 80034c0:	10a4      	asrs	r4, r4, #2
 80034c2:	2500      	movs	r5, #0
 80034c4:	42a5      	cmp	r5, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	4e0b      	ldr	r6, [pc, #44]	; (80034f8 <__libc_init_array+0x40>)
 80034ca:	4c0c      	ldr	r4, [pc, #48]	; (80034fc <__libc_init_array+0x44>)
 80034cc:	f000 f820 	bl	8003510 <_init>
 80034d0:	1ba4      	subs	r4, r4, r6
 80034d2:	10a4      	asrs	r4, r4, #2
 80034d4:	2500      	movs	r5, #0
 80034d6:	42a5      	cmp	r5, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034e0:	4798      	blx	r3
 80034e2:	3501      	adds	r5, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ea:	4798      	blx	r3
 80034ec:	3501      	adds	r5, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	08003548 	.word	0x08003548
 80034f4:	08003548 	.word	0x08003548
 80034f8:	08003548 	.word	0x08003548
 80034fc:	0800354c 	.word	0x0800354c

08003500 <memset>:
 8003500:	4402      	add	r2, r0
 8003502:	4603      	mov	r3, r0
 8003504:	4293      	cmp	r3, r2
 8003506:	d100      	bne.n	800350a <memset+0xa>
 8003508:	4770      	bx	lr
 800350a:	f803 1b01 	strb.w	r1, [r3], #1
 800350e:	e7f9      	b.n	8003504 <memset+0x4>

08003510 <_init>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	bf00      	nop
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr

0800351c <_fini>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr
